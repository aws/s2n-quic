/* automatically generated by rust-bindgen 0.71.1 */

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
pub const DESEGMENT_ONE_MORE_SEGMENT: u32 = 268435455;
pub const DESEGMENT_UNTIL_FIN: u32 = 268435454;
pub const ENC_BIG_ENDIAN: u32 = 0;
pub type __time_t = ::std::os::raw::c_long;
pub type guint8 = ::std::os::raw::c_uchar;
pub type gint16 = ::std::os::raw::c_short;
pub type guint16 = ::std::os::raw::c_ushort;
pub type guint32 = ::std::os::raw::c_uint;
pub type guint64 = ::std::os::raw::c_ulong;
pub type time_t = __time_t;
pub type gchar = ::std::os::raw::c_char;
pub type gint = ::std::os::raw::c_int;
pub type gboolean = gint;
pub type guint = ::std::os::raw::c_uint;
pub type GHashTable = u8;
pub type GSList = __BindgenOpaqueArray<u64, 2usize>;
#[doc = " @defgroup wmem Wireshark Memory Manager\n\n Wmem is a memory management framework for Wireshark that makes it simple to\n write dissectors (and other 'user-space' code) that doesn't leak memory. The\n core module provides basic functions like malloc, realloc and free, but\n many other functions are available (see the \"Modules\" list at the top of\n the generated doxygen HTML).\n\n Any wmem functions which allocate memory are guaranteed to either succeed or\n abort the program. However, they *can* still legally return NULL when the\n amount of requested memory is zero.\n\n @{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wmem_allocator_t {
    _unused: [u8; 0],
}
#[doc = " A public opaque type representing one wmem allocation pool."]
pub type wmem_allocator_t = _wmem_allocator_t;
#[doc = " @addtogroup wmem\n  @{\n    @defgroup wmem-list Doubly-Linked List\n\n    A doubly-linked list implementation on top of wmem.\n\n    @{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wmem_list_t {
    _unused: [u8; 0],
}
pub type wmem_list_t = _wmem_list_t;
#[doc = " @addtogroup wmem\n  @{\n    @defgroup wmem-map Hash Map\n\n    A hash map implementation on top of wmem. Provides insertion, deletion and\n    lookup in expected amortized constant time. Uses universal hashing to map\n    keys into buckets, and provides a generic strong hash function that makes\n    it secure against algorithmic complexity attacks, and suitable for use\n    even with untrusted data.\n\n    @{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wmem_map_t {
    _unused: [u8; 0],
}
pub type wmem_map_t = _wmem_map_t;
#[doc = " data structure to hold time values with nanosecond resolution"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nstime_t {
    pub secs: time_t,
    pub nsecs: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nstime_t"][::std::mem::size_of::<nstime_t>() - 16usize];
    ["Alignment of nstime_t"][::std::mem::align_of::<nstime_t>() - 8usize];
    ["Offset of field: nstime_t::secs"][::std::mem::offset_of!(nstime_t, secs) - 0usize];
    ["Offset of field: nstime_t::nsecs"][::std::mem::offset_of!(nstime_t, nsecs) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wtap_rec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epan_session {
    _unused: [u8; 0],
}
pub type frame_data = __BindgenOpaqueArray<u64, 13usize>;
#[doc = " \"testy, virtual(-izable) buffer\".  They are testy in that they get mad when\n an attempt is made to access data beyond the bounds of their array. In that\n case, they throw an exception.\n\n They are virtualizable in that new tvbuff's can be made from other tvbuffs,\n while only the original tvbuff may have data. That is, the new tvbuff has\n virtual data."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tvbuff {
    _unused: [u8; 0],
}
pub type tvbuff_t = u8;
pub type address = __BindgenOpaqueArray<u64, 3usize>;
pub const port_type_PT_NONE: port_type = 0;
pub const port_type_PT_SCTP: port_type = 1;
pub const port_type_PT_TCP: port_type = 2;
pub const port_type_PT_UDP: port_type = 3;
pub const port_type_PT_DCCP: port_type = 4;
pub const port_type_PT_IPX: port_type = 5;
pub const port_type_PT_DDP: port_type = 6;
pub const port_type_PT_IDP: port_type = 7;
pub const port_type_PT_USB: port_type = 8;
pub const port_type_PT_I2C: port_type = 9;
pub const port_type_PT_IBQP: port_type = 10;
pub const port_type_PT_BLUETOOTH: port_type = 11;
pub const port_type_PT_IWARP_MPA: port_type = 12;
pub const port_type_PT_MCTP: port_type = 13;
pub type port_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _packet_info {
    #[doc = "< name of protocol currently being dissected"]
    pub current_proto: *const ::std::os::raw::c_char,
    #[doc = "< Column formatting information"]
    pub cinfo: *mut epan_column_info,
    #[doc = "< Presence flags for some items"]
    pub presence_flags: guint32,
    #[doc = "< Frame number"]
    pub num: guint32,
    #[doc = "< Packet absolute time stamp"]
    pub abs_ts: nstime_t,
    #[doc = "< Relative timestamp (yes, it can be negative)"]
    pub rel_ts: nstime_t,
    #[doc = "< Relative timestamp from capture start (might be negative for broken files)"]
    pub rel_cap_ts: nstime_t,
    #[doc = "< Relative timestamp from capture start valid"]
    pub rel_cap_ts_present: gboolean,
    pub fd: *mut frame_data,
    pub pseudo_header: *mut wtap_pseudo_header,
    #[doc = "< Record metadata"]
    pub rec: *mut wtap_rec,
    #[doc = "< Frame data sources"]
    pub data_src: *mut GSList,
    #[doc = "< link-layer source address"]
    pub dl_src: address,
    #[doc = "< link-layer destination address"]
    pub dl_dst: address,
    #[doc = "< network-layer source address"]
    pub net_src: address,
    #[doc = "< network-layer destination address"]
    pub net_dst: address,
    #[doc = "< source address (net if present, DL otherwise )"]
    pub src: address,
    #[doc = "< destination address (net if present, DL otherwise )"]
    pub dst: address,
    #[doc = "< First encountered VLAN Id if present otherwise 0"]
    pub vlan_id: guint32,
    #[doc = "< reason why reassembly wasn't done, if any"]
    pub noreassembly_reason: *const ::std::os::raw::c_char,
    #[doc = "< TRUE if the protocol is only a fragment"]
    pub fragmented: gboolean,
    pub flags: _packet_info__bindgen_ty_1,
    #[doc = "< type of the following two port numbers"]
    pub ptype: port_type,
    #[doc = "< source port"]
    pub srcport: guint32,
    #[doc = "< destination port"]
    pub destport: guint32,
    #[doc = "< matched uint for calling subdissector from table"]
    pub match_uint: guint32,
    #[doc = "< matched string for calling subdissector from table"]
    pub match_string: *const ::std::os::raw::c_char,
    #[doc = "< TRUE if address/port endpoints member should be used for conversations"]
    pub use_conv_addr_port_endpoints: gboolean,
    #[doc = "< Data that can be used for address+port conversations, including wildcarding"]
    pub conv_addr_port_endpoints: *mut conversation_addr_port_endpoints,
    #[doc = "< Arbritrary conversation identifier; can't be wildcarded"]
    pub conv_elements: *mut conversation_element,
    #[doc = "< >0 if this segment could be desegmented.\nA dissector that can offer this API (e.g.\nTCP) sets can_desegment=2, then\ncan_desegment is decremented by 1 each time\nwe pass to the next subdissector. Thus only\nthe dissector immediately above the\nprotocol which sets the flag can use it"]
    pub can_desegment: guint16,
    #[doc = "< Value of can_desegment before current\ndissector was called.  Supplied so that\ndissectors for proxy protocols such as\nSOCKS can restore it, allowing the\ndissectors that they call to use the\nTCP dissector's desegmentation (SOCKS\njust retransmits TCP segments once it's\nfinished setting things up, so the TCP\ndesegmentor can desegment its payload)."]
    pub saved_can_desegment: guint16,
    #[doc = "< offset to stuff needing desegmentation"]
    pub desegment_offset: ::std::os::raw::c_int,
    #[doc = "< requested desegmentation additional length\nor\nDESEGMENT_ONE_MORE_SEGMENT:\nDesegment one more full segment\n(warning! only partially implemented)\nDESEGMENT_UNTIL_FIN:\nDesgment all data for this tcp session\nuntil the FIN segment."]
    pub desegment_len: guint32,
    #[doc = "< >0 if the subdissector has specified\na value in 'bytes_until_next_pdu'.\nWhen a dissector detects that the next PDU\nwill start beyond the start of the next\nsegment, it can set this value to 2\nand 'bytes_until_next_pdu' to the number of\nbytes beyond the next segment where the\nnext PDU starts.\n\nIf the protocol dissector below this\none is capable of PDU tracking it can\nuse this hint to detect PDUs that starts\nunaligned to the segment boundaries.\nThe TCP dissector is using this hint from\n(some) protocols to detect when a new PDU\nstarts in the middle of a tcp segment.\n\nThere is intelligence in the glue between\ndissector layers to make sure that this\nrequest is only passed down to the protocol\nimmediately below the current one and not\nany further."]
    pub want_pdu_tracking: guint16,
    pub bytes_until_next_pdu: guint32,
    #[doc = "< Packet was captured as an\noutbound (P2P_DIR_SENT)\ninbound (P2P_DIR_RECV)\nunknown (P2P_DIR_UNKNOWN)"]
    pub p2p_dir: ::std::os::raw::c_int,
    #[doc = "< a hash table passed from one dissector to another"]
    pub private_table: *mut GHashTable,
    #[doc = "< layers of each protocol"]
    pub layers: *mut wmem_list_t,
    pub proto_layers: *mut wmem_map_t,
    #[doc = "< The current \"depth\" or layer number in the current frame"]
    pub curr_layer_num: guint8,
    #[doc = "< The current \"depth\" or layer number for this dissector in the current frame"]
    pub curr_proto_layer_num: guint8,
    pub link_number: guint16,
    #[doc = "< clnp/cotp source reference (can't use srcport, this would confuse tpkt)"]
    pub clnp_srcref: guint16,
    #[doc = "< clnp/cotp destination reference (can't use dstport, this would confuse tpkt)"]
    pub clnp_dstref: guint16,
    #[doc = "< 3GPP messages are sometime different UP link(UL) or Downlink(DL)"]
    pub link_dir: ::std::os::raw::c_int,
    #[doc = "< Rcv.Wind.Shift src applies when sending segments; -1 unknown; -2 disabled"]
    pub src_win_scale: gint16,
    #[doc = "< Rcv.Wind.Shift dst applies when sending segments; -1 unknown; -2 disabled"]
    pub dst_win_scale: gint16,
    #[doc = "< Per packet proto data"]
    pub proto_data: *mut GSList,
    pub frame_end_routines: *mut GSList,
    #[doc = "< Memory pool scoped to the pinfo struct"]
    pub pool: *mut wmem_allocator_t,
    pub epan: *mut epan_session,
    #[doc = "< name of heur list if this packet is being heuristically dissected"]
    pub heur_list_name: *const gchar,
    #[doc = "< The current \"depth\" or layer number in the current frame"]
    pub dissection_depth: ::std::os::raw::c_int,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _packet_info__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _packet_info__bindgen_ty_1"]
        [::std::mem::size_of::<_packet_info__bindgen_ty_1>() - 4usize];
    ["Alignment of _packet_info__bindgen_ty_1"]
        [::std::mem::align_of::<_packet_info__bindgen_ty_1>() - 4usize];
};
impl _packet_info__bindgen_ty_1 {
    #[inline]
    pub fn in_error_pkt(&self) -> guint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_error_pkt(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn in_error_pkt_raw(this: *const Self) -> guint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_in_error_pkt_raw(this: *mut Self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn in_gre_pkt(&self) -> guint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_gre_pkt(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn in_gre_pkt_raw(this: *const Self) -> guint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_in_gre_pkt_raw(this: *mut Self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        in_error_pkt: guint32,
        in_gre_pkt: guint32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let in_error_pkt: u32 = unsafe { ::std::mem::transmute(in_error_pkt) };
            in_error_pkt as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let in_gre_pkt: u32 = unsafe { ::std::mem::transmute(in_gre_pkt) };
            in_gre_pkt as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _packet_info"][::std::mem::size_of::<_packet_info>() - 440usize];
    ["Alignment of _packet_info"][::std::mem::align_of::<_packet_info>() - 8usize];
    ["Offset of field: _packet_info::current_proto"]
        [::std::mem::offset_of!(_packet_info, current_proto) - 0usize];
    ["Offset of field: _packet_info::cinfo"][::std::mem::offset_of!(_packet_info, cinfo) - 8usize];
    ["Offset of field: _packet_info::presence_flags"]
        [::std::mem::offset_of!(_packet_info, presence_flags) - 16usize];
    ["Offset of field: _packet_info::num"][::std::mem::offset_of!(_packet_info, num) - 20usize];
    ["Offset of field: _packet_info::abs_ts"]
        [::std::mem::offset_of!(_packet_info, abs_ts) - 24usize];
    ["Offset of field: _packet_info::rel_ts"]
        [::std::mem::offset_of!(_packet_info, rel_ts) - 40usize];
    ["Offset of field: _packet_info::rel_cap_ts"]
        [::std::mem::offset_of!(_packet_info, rel_cap_ts) - 56usize];
    ["Offset of field: _packet_info::rel_cap_ts_present"]
        [::std::mem::offset_of!(_packet_info, rel_cap_ts_present) - 72usize];
    ["Offset of field: _packet_info::fd"][::std::mem::offset_of!(_packet_info, fd) - 80usize];
    ["Offset of field: _packet_info::pseudo_header"]
        [::std::mem::offset_of!(_packet_info, pseudo_header) - 88usize];
    ["Offset of field: _packet_info::rec"][::std::mem::offset_of!(_packet_info, rec) - 96usize];
    ["Offset of field: _packet_info::data_src"]
        [::std::mem::offset_of!(_packet_info, data_src) - 104usize];
    ["Offset of field: _packet_info::dl_src"]
        [::std::mem::offset_of!(_packet_info, dl_src) - 112usize];
    ["Offset of field: _packet_info::dl_dst"]
        [::std::mem::offset_of!(_packet_info, dl_dst) - 136usize];
    ["Offset of field: _packet_info::net_src"]
        [::std::mem::offset_of!(_packet_info, net_src) - 160usize];
    ["Offset of field: _packet_info::net_dst"]
        [::std::mem::offset_of!(_packet_info, net_dst) - 184usize];
    ["Offset of field: _packet_info::src"][::std::mem::offset_of!(_packet_info, src) - 208usize];
    ["Offset of field: _packet_info::dst"][::std::mem::offset_of!(_packet_info, dst) - 232usize];
    ["Offset of field: _packet_info::vlan_id"]
        [::std::mem::offset_of!(_packet_info, vlan_id) - 256usize];
    ["Offset of field: _packet_info::noreassembly_reason"]
        [::std::mem::offset_of!(_packet_info, noreassembly_reason) - 264usize];
    ["Offset of field: _packet_info::fragmented"]
        [::std::mem::offset_of!(_packet_info, fragmented) - 272usize];
    ["Offset of field: _packet_info::flags"]
        [::std::mem::offset_of!(_packet_info, flags) - 276usize];
    ["Offset of field: _packet_info::ptype"]
        [::std::mem::offset_of!(_packet_info, ptype) - 280usize];
    ["Offset of field: _packet_info::srcport"]
        [::std::mem::offset_of!(_packet_info, srcport) - 284usize];
    ["Offset of field: _packet_info::destport"]
        [::std::mem::offset_of!(_packet_info, destport) - 288usize];
    ["Offset of field: _packet_info::match_uint"]
        [::std::mem::offset_of!(_packet_info, match_uint) - 292usize];
    ["Offset of field: _packet_info::match_string"]
        [::std::mem::offset_of!(_packet_info, match_string) - 296usize];
    ["Offset of field: _packet_info::use_conv_addr_port_endpoints"]
        [::std::mem::offset_of!(_packet_info, use_conv_addr_port_endpoints) - 304usize];
    ["Offset of field: _packet_info::conv_addr_port_endpoints"]
        [::std::mem::offset_of!(_packet_info, conv_addr_port_endpoints) - 312usize];
    ["Offset of field: _packet_info::conv_elements"]
        [::std::mem::offset_of!(_packet_info, conv_elements) - 320usize];
    ["Offset of field: _packet_info::can_desegment"]
        [::std::mem::offset_of!(_packet_info, can_desegment) - 328usize];
    ["Offset of field: _packet_info::saved_can_desegment"]
        [::std::mem::offset_of!(_packet_info, saved_can_desegment) - 330usize];
    ["Offset of field: _packet_info::desegment_offset"]
        [::std::mem::offset_of!(_packet_info, desegment_offset) - 332usize];
    ["Offset of field: _packet_info::desegment_len"]
        [::std::mem::offset_of!(_packet_info, desegment_len) - 336usize];
    ["Offset of field: _packet_info::want_pdu_tracking"]
        [::std::mem::offset_of!(_packet_info, want_pdu_tracking) - 340usize];
    ["Offset of field: _packet_info::bytes_until_next_pdu"]
        [::std::mem::offset_of!(_packet_info, bytes_until_next_pdu) - 344usize];
    ["Offset of field: _packet_info::p2p_dir"]
        [::std::mem::offset_of!(_packet_info, p2p_dir) - 348usize];
    ["Offset of field: _packet_info::private_table"]
        [::std::mem::offset_of!(_packet_info, private_table) - 352usize];
    ["Offset of field: _packet_info::layers"]
        [::std::mem::offset_of!(_packet_info, layers) - 360usize];
    ["Offset of field: _packet_info::proto_layers"]
        [::std::mem::offset_of!(_packet_info, proto_layers) - 368usize];
    ["Offset of field: _packet_info::curr_layer_num"]
        [::std::mem::offset_of!(_packet_info, curr_layer_num) - 376usize];
    ["Offset of field: _packet_info::curr_proto_layer_num"]
        [::std::mem::offset_of!(_packet_info, curr_proto_layer_num) - 377usize];
    ["Offset of field: _packet_info::link_number"]
        [::std::mem::offset_of!(_packet_info, link_number) - 378usize];
    ["Offset of field: _packet_info::clnp_srcref"]
        [::std::mem::offset_of!(_packet_info, clnp_srcref) - 380usize];
    ["Offset of field: _packet_info::clnp_dstref"]
        [::std::mem::offset_of!(_packet_info, clnp_dstref) - 382usize];
    ["Offset of field: _packet_info::link_dir"]
        [::std::mem::offset_of!(_packet_info, link_dir) - 384usize];
    ["Offset of field: _packet_info::src_win_scale"]
        [::std::mem::offset_of!(_packet_info, src_win_scale) - 388usize];
    ["Offset of field: _packet_info::dst_win_scale"]
        [::std::mem::offset_of!(_packet_info, dst_win_scale) - 390usize];
    ["Offset of field: _packet_info::proto_data"]
        [::std::mem::offset_of!(_packet_info, proto_data) - 392usize];
    ["Offset of field: _packet_info::frame_end_routines"]
        [::std::mem::offset_of!(_packet_info, frame_end_routines) - 400usize];
    ["Offset of field: _packet_info::pool"][::std::mem::offset_of!(_packet_info, pool) - 408usize];
    ["Offset of field: _packet_info::epan"][::std::mem::offset_of!(_packet_info, epan) - 416usize];
    ["Offset of field: _packet_info::heur_list_name"]
        [::std::mem::offset_of!(_packet_info, heur_list_name) - 424usize];
    ["Offset of field: _packet_info::dissection_depth"]
        [::std::mem::offset_of!(_packet_info, dissection_depth) - 432usize];
};
pub const ftenum_FT_NONE: ftenum = 0;
pub const ftenum_FT_PROTOCOL: ftenum = 1;
pub const ftenum_FT_BOOLEAN: ftenum = 2;
pub const ftenum_FT_CHAR: ftenum = 3;
pub const ftenum_FT_UINT8: ftenum = 4;
pub const ftenum_FT_UINT16: ftenum = 5;
pub const ftenum_FT_UINT24: ftenum = 6;
pub const ftenum_FT_UINT32: ftenum = 7;
pub const ftenum_FT_UINT40: ftenum = 8;
pub const ftenum_FT_UINT48: ftenum = 9;
pub const ftenum_FT_UINT56: ftenum = 10;
pub const ftenum_FT_UINT64: ftenum = 11;
pub const ftenum_FT_INT8: ftenum = 12;
pub const ftenum_FT_INT16: ftenum = 13;
pub const ftenum_FT_INT24: ftenum = 14;
pub const ftenum_FT_INT32: ftenum = 15;
pub const ftenum_FT_INT40: ftenum = 16;
pub const ftenum_FT_INT48: ftenum = 17;
pub const ftenum_FT_INT56: ftenum = 18;
pub const ftenum_FT_INT64: ftenum = 19;
pub const ftenum_FT_IEEE_11073_SFLOAT: ftenum = 20;
pub const ftenum_FT_IEEE_11073_FLOAT: ftenum = 21;
pub const ftenum_FT_FLOAT: ftenum = 22;
pub const ftenum_FT_DOUBLE: ftenum = 23;
pub const ftenum_FT_ABSOLUTE_TIME: ftenum = 24;
pub const ftenum_FT_RELATIVE_TIME: ftenum = 25;
pub const ftenum_FT_STRING: ftenum = 26;
pub const ftenum_FT_STRINGZ: ftenum = 27;
pub const ftenum_FT_UINT_STRING: ftenum = 28;
pub const ftenum_FT_ETHER: ftenum = 29;
pub const ftenum_FT_BYTES: ftenum = 30;
pub const ftenum_FT_UINT_BYTES: ftenum = 31;
pub const ftenum_FT_IPv4: ftenum = 32;
pub const ftenum_FT_IPv6: ftenum = 33;
pub const ftenum_FT_IPXNET: ftenum = 34;
pub const ftenum_FT_FRAMENUM: ftenum = 35;
pub const ftenum_FT_GUID: ftenum = 36;
pub const ftenum_FT_OID: ftenum = 37;
pub const ftenum_FT_EUI64: ftenum = 38;
pub const ftenum_FT_AX25: ftenum = 39;
pub const ftenum_FT_VINES: ftenum = 40;
pub const ftenum_FT_REL_OID: ftenum = 41;
pub const ftenum_FT_SYSTEM_ID: ftenum = 42;
pub const ftenum_FT_STRINGZPAD: ftenum = 43;
pub const ftenum_FT_FCWWN: ftenum = 44;
pub const ftenum_FT_STRINGZTRUNC: ftenum = 45;
pub const ftenum_FT_NUM_TYPES: ftenum = 46;
pub type ftenum = ::std::os::raw::c_uint;
pub use self::ftenum as ftenum_t;
#[doc = "< none"]
pub const field_display_e_BASE_NONE: field_display_e = 0;
#[doc = "< decimal [integer, float]"]
pub const field_display_e_BASE_DEC: field_display_e = 1;
#[doc = "< hexadecimal [integer, float]"]
pub const field_display_e_BASE_HEX: field_display_e = 2;
#[doc = "< octal [integer]"]
pub const field_display_e_BASE_OCT: field_display_e = 3;
#[doc = "< decimal (hexadecimal) [integer]"]
pub const field_display_e_BASE_DEC_HEX: field_display_e = 4;
#[doc = "< hexadecimal (decimal) [integer]"]
pub const field_display_e_BASE_HEX_DEC: field_display_e = 5;
#[doc = "< call custom routine to format [integer, float]"]
pub const field_display_e_BASE_CUSTOM: field_display_e = 6;
#[doc = "< exponential [float]"]
pub const field_display_e_BASE_EXP: field_display_e = 7;
#[doc = "< hexadecimal bytes with a period (.) between each byte"]
pub const field_display_e_SEP_DOT: field_display_e = 8;
#[doc = "< hexadecimal bytes with a dash (-) between each byte"]
pub const field_display_e_SEP_DASH: field_display_e = 9;
#[doc = "< hexadecimal bytes with a colon (:) between each byte"]
pub const field_display_e_SEP_COLON: field_display_e = 10;
#[doc = "< hexadecimal bytes with a space between each byte"]
pub const field_display_e_SEP_SPACE: field_display_e = 11;
#[doc = "< Used for IPv4 address that shouldn't be resolved (like for netmasks)"]
pub const field_display_e_BASE_NETMASK: field_display_e = 12;
#[doc = "< UDP port"]
pub const field_display_e_BASE_PT_UDP: field_display_e = 13;
#[doc = "< TCP port"]
pub const field_display_e_BASE_PT_TCP: field_display_e = 14;
#[doc = "< DCCP port"]
pub const field_display_e_BASE_PT_DCCP: field_display_e = 15;
#[doc = "< SCTP port"]
pub const field_display_e_BASE_PT_SCTP: field_display_e = 16;
#[doc = "< OUI resolution"]
pub const field_display_e_BASE_OUI: field_display_e = 17;
#[doc = "< local time in our time zone, with month and day"]
pub const field_display_e_ABSOLUTE_TIME_LOCAL: field_display_e = 18;
#[doc = "< UTC, with month and day"]
pub const field_display_e_ABSOLUTE_TIME_UTC: field_display_e = 19;
#[doc = "< UTC, with 1-origin day-of-year"]
pub const field_display_e_ABSOLUTE_TIME_DOY_UTC: field_display_e = 20;
#[doc = "< UTC, with \"NULL\" when timestamp is all zeros"]
pub const field_display_e_ABSOLUTE_TIME_NTP_UTC: field_display_e = 21;
#[doc = "< Unix time"]
pub const field_display_e_ABSOLUTE_TIME_UNIX: field_display_e = 22;
#[doc = "< Replace all whitespace characters (newline, formfeed, etc) with \"space\"."]
pub const field_display_e_BASE_STR_WSP: field_display_e = 23;
pub type field_display_e = ::std::os::raw::c_uint;
#[doc = "< Field is not referenced"]
pub const hf_ref_type_HF_REF_TYPE_NONE: hf_ref_type = 0;
#[doc = "< Field is indirectly referenced (only applicable for FT_PROTOCOL) via. its child"]
pub const hf_ref_type_HF_REF_TYPE_INDIRECT: hf_ref_type = 1;
#[doc = "< Field is directly referenced"]
pub const hf_ref_type_HF_REF_TYPE_DIRECT: hf_ref_type = 2;
pub type hf_ref_type = ::std::os::raw::c_uint;
#[doc = " information describing a header field"]
pub type header_field_info = _header_field_info;
#[doc = " information describing a header field"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _header_field_info {
    #[doc = "< [FIELDNAME] full name of this field"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = "< [FIELDFILTERNAME] filter name of this field"]
    pub abbrev: *const ::std::os::raw::c_char,
    #[doc = "< [FIELDTYPE] field type, one of FT_ (from ftypes.h)"]
    pub type_: ftenum,
    #[doc = "< [FIELDDISPLAY] one of BASE_, or field bit-width if FT_BOOLEAN and non-zero bitmask"]
    pub display: ::std::os::raw::c_int,
    #[doc = "< [FIELDCONVERT] value_string, val64_string, range_string or true_false_string,\ntypically converted by VALS(), RVALS() or TFS().\nIf this is an FT_PROTOCOL or BASE_PROTOCOL_INFO then it points to the\nassociated protocol_t structure"]
    pub strings: *const ::std::os::raw::c_void,
    #[doc = "< [BITMASK] bitmask of interesting bits"]
    pub bitmask: guint64,
    #[doc = "< [FIELDDESCR] Brief description of field"]
    pub blurb: *const ::std::os::raw::c_char,
    #[doc = "< Field ID"]
    pub id: ::std::os::raw::c_int,
    #[doc = "< parent protocol tree"]
    pub parent: ::std::os::raw::c_int,
    #[doc = "< is this field referenced by a filter"]
    pub ref_type: hf_ref_type,
    #[doc = "< ID of previous hfinfo with same abbrev"]
    pub same_name_prev_id: ::std::os::raw::c_int,
    #[doc = "< Link to next hfinfo with same abbrev"]
    pub same_name_next: *mut header_field_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _header_field_info"][::std::mem::size_of::<_header_field_info>() - 72usize];
    ["Alignment of _header_field_info"][::std::mem::align_of::<_header_field_info>() - 8usize];
    ["Offset of field: _header_field_info::name"]
        [::std::mem::offset_of!(_header_field_info, name) - 0usize];
    ["Offset of field: _header_field_info::abbrev"]
        [::std::mem::offset_of!(_header_field_info, abbrev) - 8usize];
    ["Offset of field: _header_field_info::type_"]
        [::std::mem::offset_of!(_header_field_info, type_) - 16usize];
    ["Offset of field: _header_field_info::display"]
        [::std::mem::offset_of!(_header_field_info, display) - 20usize];
    ["Offset of field: _header_field_info::strings"]
        [::std::mem::offset_of!(_header_field_info, strings) - 24usize];
    ["Offset of field: _header_field_info::bitmask"]
        [::std::mem::offset_of!(_header_field_info, bitmask) - 32usize];
    ["Offset of field: _header_field_info::blurb"]
        [::std::mem::offset_of!(_header_field_info, blurb) - 40usize];
    ["Offset of field: _header_field_info::id"]
        [::std::mem::offset_of!(_header_field_info, id) - 48usize];
    ["Offset of field: _header_field_info::parent"]
        [::std::mem::offset_of!(_header_field_info, parent) - 52usize];
    ["Offset of field: _header_field_info::ref_type"]
        [::std::mem::offset_of!(_header_field_info, ref_type) - 56usize];
    ["Offset of field: _header_field_info::same_name_prev_id"]
        [::std::mem::offset_of!(_header_field_info, same_name_prev_id) - 60usize];
    ["Offset of field: _header_field_info::same_name_next"]
        [::std::mem::offset_of!(_header_field_info, same_name_next) - 64usize];
};
#[doc = " Each proto_tree, proto_item is one of these."]
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _proto_node {
    pub _bindgen_opaque_blob: [u64; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _proto_node"][::std::mem::size_of::<_proto_node>() - 48usize];
    ["Alignment of _proto_node"][::std::mem::align_of::<_proto_node>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proto_plugin {
    pub register_protoinfo: ::std::option::Option<unsafe extern "C" fn()>,
    pub register_handoff: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of proto_plugin"][::std::mem::size_of::<proto_plugin>() - 16usize];
    ["Alignment of proto_plugin"][::std::mem::align_of::<proto_plugin>() - 8usize];
    ["Offset of field: proto_plugin::register_protoinfo"]
        [::std::mem::offset_of!(proto_plugin, register_protoinfo) - 0usize];
    ["Offset of field: proto_plugin::register_handoff"]
        [::std::mem::offset_of!(proto_plugin, register_handoff) - 8usize];
};
#[doc = "  Helper routines for column utility structures and routines."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epan_column_info {
    _unused: [u8; 0],
}
#[doc = "< 0) Absolute date, as YYYY-MM-DD, and time"]
pub const COL_ABS_YMD_TIME: _bindgen_ty_21 = 0;
#[doc = "< 1) Absolute date, as YYYY/DOY, and time"]
pub const COL_ABS_YDOY_TIME: _bindgen_ty_21 = 1;
#[doc = "< 2) Absolute time"]
pub const COL_ABS_TIME: _bindgen_ty_21 = 2;
#[doc = "< 3) Cumulative number of bytes"]
pub const COL_CUMULATIVE_BYTES: _bindgen_ty_21 = 3;
#[doc = "< 4) Custom column (any filter name's contents)"]
pub const COL_CUSTOM: _bindgen_ty_21 = 4;
#[doc = "< 5) Delta time"]
pub const COL_DELTA_TIME: _bindgen_ty_21 = 5;
#[doc = "< 6) Delta time displayed"]
pub const COL_DELTA_TIME_DIS: _bindgen_ty_21 = 6;
#[doc = "< 7) Resolved dest"]
pub const COL_RES_DST: _bindgen_ty_21 = 7;
#[doc = "< 8) Unresolved dest"]
pub const COL_UNRES_DST: _bindgen_ty_21 = 8;
#[doc = "< 9) Resolved dest port"]
pub const COL_RES_DST_PORT: _bindgen_ty_21 = 9;
#[doc = "< 10) Unresolved dest port"]
pub const COL_UNRES_DST_PORT: _bindgen_ty_21 = 10;
#[doc = "< 11) Destination address"]
pub const COL_DEF_DST: _bindgen_ty_21 = 11;
#[doc = "< 12) Destination port"]
pub const COL_DEF_DST_PORT: _bindgen_ty_21 = 12;
#[doc = "< 13) Expert Info"]
pub const COL_EXPERT: _bindgen_ty_21 = 13;
#[doc = "< 14) FW-1 monitor interface/direction"]
pub const COL_IF_DIR: _bindgen_ty_21 = 14;
#[doc = "< 15) IEEE 802.11 (and WiMax?) - Channel"]
pub const COL_FREQ_CHAN: _bindgen_ty_21 = 15;
#[doc = "< 16) Data link layer dest address"]
pub const COL_DEF_DL_DST: _bindgen_ty_21 = 16;
#[doc = "< 17) Data link layer source address"]
pub const COL_DEF_DL_SRC: _bindgen_ty_21 = 17;
#[doc = "< 18) Resolved DL dest"]
pub const COL_RES_DL_DST: _bindgen_ty_21 = 18;
#[doc = "< 19) Unresolved DL dest"]
pub const COL_UNRES_DL_DST: _bindgen_ty_21 = 19;
#[doc = "< 20) Resolved DL source"]
pub const COL_RES_DL_SRC: _bindgen_ty_21 = 20;
#[doc = "< 21) Unresolved DL source"]
pub const COL_UNRES_DL_SRC: _bindgen_ty_21 = 21;
#[doc = "< 22) IEEE 802.11 - received signal strength"]
pub const COL_RSSI: _bindgen_ty_21 = 22;
#[doc = "< 23) IEEE 802.11 - TX rate in Mbps"]
pub const COL_TX_RATE: _bindgen_ty_21 = 23;
#[doc = "< 24) IP DSCP Value"]
pub const COL_DSCP_VALUE: _bindgen_ty_21 = 24;
#[doc = "< 25) Description"]
pub const COL_INFO: _bindgen_ty_21 = 25;
#[doc = "< 26) Resolved net dest"]
pub const COL_RES_NET_DST: _bindgen_ty_21 = 26;
#[doc = "< 27) Unresolved net dest"]
pub const COL_UNRES_NET_DST: _bindgen_ty_21 = 27;
#[doc = "< 28) Resolved net source"]
pub const COL_RES_NET_SRC: _bindgen_ty_21 = 28;
#[doc = "< 29) Unresolved net source"]
pub const COL_UNRES_NET_SRC: _bindgen_ty_21 = 29;
#[doc = "< 30) Network layer dest address"]
pub const COL_DEF_NET_DST: _bindgen_ty_21 = 30;
#[doc = "< 31) Network layer source address"]
pub const COL_DEF_NET_SRC: _bindgen_ty_21 = 31;
#[doc = "< 32) Packet list item number"]
pub const COL_NUMBER: _bindgen_ty_21 = 32;
#[doc = "< 33) Packet length in bytes"]
pub const COL_PACKET_LENGTH: _bindgen_ty_21 = 33;
#[doc = "< 34) Protocol"]
pub const COL_PROTOCOL: _bindgen_ty_21 = 34;
#[doc = "< 35) Relative time"]
pub const COL_REL_TIME: _bindgen_ty_21 = 35;
#[doc = "< 36) Source address"]
pub const COL_DEF_SRC: _bindgen_ty_21 = 36;
#[doc = "< 37) Source port"]
pub const COL_DEF_SRC_PORT: _bindgen_ty_21 = 37;
#[doc = "< 38) Resolved source"]
pub const COL_RES_SRC: _bindgen_ty_21 = 38;
#[doc = "< 39) Unresolved source"]
pub const COL_UNRES_SRC: _bindgen_ty_21 = 39;
#[doc = "< 40) Resolved source port"]
pub const COL_RES_SRC_PORT: _bindgen_ty_21 = 40;
#[doc = "< 41) Unresolved source port"]
pub const COL_UNRES_SRC_PORT: _bindgen_ty_21 = 41;
#[doc = "< 42) UTC date, as YYYY-MM-DD, and time"]
pub const COL_UTC_YMD_TIME: _bindgen_ty_21 = 42;
#[doc = "< 43) UTC date, as YYYY/DOY, and time"]
pub const COL_UTC_YDOY_TIME: _bindgen_ty_21 = 43;
#[doc = "< 44) UTC time"]
pub const COL_UTC_TIME: _bindgen_ty_21 = 44;
#[doc = "< 45) Command line-specified time (default relative)"]
pub const COL_CLS_TIME: _bindgen_ty_21 = 45;
#[doc = "< 46) Should always be last"]
pub const NUM_COL_FMTS: _bindgen_ty_21 = 46;
#[doc = " All of the possible columns in summary listing.\n\n NOTE1: The entries MUST remain in this order, or else you need to reorder\n        the slist[] and dlist[] arrays in column.c to match!\n\n NOTE2: Please add the COL_XYZ entry in the appropriate spot, such that the\n        dlist[] array remains in alphabetical order!"]
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dissector_handle {
    _unused: [u8; 0],
}
pub type dissector_handle_t = *mut dissector_handle;
pub const conversation_type_CONVERSATION_NONE: conversation_type = 0;
pub const conversation_type_CONVERSATION_SCTP: conversation_type = 1;
pub const conversation_type_CONVERSATION_TCP: conversation_type = 2;
pub const conversation_type_CONVERSATION_UDP: conversation_type = 3;
pub const conversation_type_CONVERSATION_DCCP: conversation_type = 4;
pub const conversation_type_CONVERSATION_IPX: conversation_type = 5;
pub const conversation_type_CONVERSATION_NCP: conversation_type = 6;
pub const conversation_type_CONVERSATION_EXCHG: conversation_type = 7;
pub const conversation_type_CONVERSATION_DDP: conversation_type = 8;
pub const conversation_type_CONVERSATION_SBCCS: conversation_type = 9;
pub const conversation_type_CONVERSATION_IDP: conversation_type = 10;
pub const conversation_type_CONVERSATION_TIPC: conversation_type = 11;
pub const conversation_type_CONVERSATION_USB: conversation_type = 12;
pub const conversation_type_CONVERSATION_I2C: conversation_type = 13;
pub const conversation_type_CONVERSATION_IBQP: conversation_type = 14;
pub const conversation_type_CONVERSATION_BLUETOOTH: conversation_type = 15;
pub const conversation_type_CONVERSATION_TDMOP: conversation_type = 16;
pub const conversation_type_CONVERSATION_DVBCI: conversation_type = 17;
pub const conversation_type_CONVERSATION_ISO14443: conversation_type = 18;
pub const conversation_type_CONVERSATION_ISDN: conversation_type = 19;
pub const conversation_type_CONVERSATION_H223: conversation_type = 20;
pub const conversation_type_CONVERSATION_X25: conversation_type = 21;
pub const conversation_type_CONVERSATION_IAX2: conversation_type = 22;
pub const conversation_type_CONVERSATION_DLCI: conversation_type = 23;
pub const conversation_type_CONVERSATION_ISUP: conversation_type = 24;
pub const conversation_type_CONVERSATION_BICC: conversation_type = 25;
pub const conversation_type_CONVERSATION_GSMTAP: conversation_type = 26;
pub const conversation_type_CONVERSATION_IUUP: conversation_type = 27;
pub const conversation_type_CONVERSATION_DVBBBF: conversation_type = 28;
pub const conversation_type_CONVERSATION_IWARP_MPA: conversation_type = 29;
pub const conversation_type_CONVERSATION_BT_UTP: conversation_type = 30;
pub const conversation_type_CONVERSATION_LOG: conversation_type = 31;
pub const conversation_type_CONVERSATION_LTP: conversation_type = 32;
pub const conversation_type_CONVERSATION_MCTP: conversation_type = 33;
pub const conversation_type_CONVERSATION_NVME_MI: conversation_type = 34;
pub const conversation_type_CONVERSATION_BP: conversation_type = 35;
pub const conversation_type_CONVERSATION_SNMP: conversation_type = 36;
pub const conversation_type_CONVERSATION_QUIC: conversation_type = 37;
pub const conversation_type_CONVERSATION_IDN: conversation_type = 38;
pub type conversation_type = ::std::os::raw::c_uint;
#[doc = " Elements used to identify conversations for *_full routines and\n pinfo->conv_elements.\n Arrays must be terminated with an element .type set to CE_CONVERSATION_TYPE.\n\n This is currently set only by conversation_set_elements_by_id(); it\n is not set for conversations identified by address/port endpoints.\n\n In find_conversation_pinfo() and find_or_create_conversation(), if\n any dissector has set this, then, unless some dissector has set the\n pair of address/port endpoints (see below), the array of elements\n is used to look up or create the conversation.  Otherwise, the\n current addresses and ports in the packet_info structure are used.\n\n XXX - is there any reason why we shouldn't use an array of conversation\n elements, with the appropriate addresses and ports, and set it for\n all protocols that use conversations specified by a pair of address/port\n endpoints?  That might simplify find_conversation_pinfo() by having\n them always use the array of elements if it's present, and just fail if\n it's not."]
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct conversation_element {
    pub _bindgen_opaque_blob: [u64; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union conversation_element__bindgen_ty_1 {
    pub conversation_type_val: conversation_type,
    pub addr_val: address,
    pub port_val: ::std::os::raw::c_uint,
    pub str_val: *const ::std::os::raw::c_char,
    pub uint_val: ::std::os::raw::c_uint,
    pub uint64_val: u64,
    pub int_val: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of conversation_element__bindgen_ty_1"]
        [::std::mem::size_of::<conversation_element__bindgen_ty_1>() - 24usize];
    ["Alignment of conversation_element__bindgen_ty_1"]
        [::std::mem::align_of::<conversation_element__bindgen_ty_1>() - 8usize];
    ["Offset of field: conversation_element__bindgen_ty_1::conversation_type_val"][::std::mem::offset_of!(
        conversation_element__bindgen_ty_1,
        conversation_type_val
    ) - 0usize];
    ["Offset of field: conversation_element__bindgen_ty_1::addr_val"]
        [::std::mem::offset_of!(conversation_element__bindgen_ty_1, addr_val) - 0usize];
    ["Offset of field: conversation_element__bindgen_ty_1::port_val"]
        [::std::mem::offset_of!(conversation_element__bindgen_ty_1, port_val) - 0usize];
    ["Offset of field: conversation_element__bindgen_ty_1::str_val"]
        [::std::mem::offset_of!(conversation_element__bindgen_ty_1, str_val) - 0usize];
    ["Offset of field: conversation_element__bindgen_ty_1::uint_val"]
        [::std::mem::offset_of!(conversation_element__bindgen_ty_1, uint_val) - 0usize];
    ["Offset of field: conversation_element__bindgen_ty_1::uint64_val"]
        [::std::mem::offset_of!(conversation_element__bindgen_ty_1, uint64_val) - 0usize];
    ["Offset of field: conversation_element__bindgen_ty_1::int_val"]
        [::std::mem::offset_of!(conversation_element__bindgen_ty_1, int_val) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of conversation_element"][::std::mem::size_of::<conversation_element>() - 32usize];
    ["Alignment of conversation_element"][::std::mem::align_of::<conversation_element>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct conversation_addr_port_endpoints {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wtap_pseudo_header {
    pub _address: u8,
}
