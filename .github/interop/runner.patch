diff --git a/certs.sh b/certs.sh
index b26b2f8..b7652af 100755
--- a/certs.sh
+++ b/certs.sh
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/usr/bin/env bash
 
 set -e
 
diff --git a/docker-compose.yml b/docker-compose.yml
index 7541cae..ba1b4da 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -2,7 +2,7 @@ version: "2.4"
 
 services:
   sim:
-    image: martenseemann/quic-network-simulator
+    image: wesleyrosenblum/quic-network-simulator
     container_name: sim
     hostname: sim
     stdin_open: true
@@ -40,6 +40,7 @@ services:
       - SSLKEYLOGFILE=/logs/keys.log
       - QLOGDIR=/logs/qlog/
       - TESTCASE=$TESTCASE_SERVER
+      - TEST_TYPE=$TEST_TYPE
       - VERSION=$VERSION
     depends_on:
       - sim
@@ -68,6 +69,7 @@ services:
       - SSLKEYLOGFILE=/logs/keys.log
       - QLOGDIR=/logs/qlog/
       - TESTCASE=$TESTCASE_CLIENT
+      - TEST_TYPE=$TEST_TYPE
       - REQUESTS=$REQUESTS
       - VERSION=$VERSION
     depends_on:
diff --git a/implementations.json b/implementations.json
index 3df16da..70ff578 100644
--- a/implementations.json
+++ b/implementations.json
@@ -1,24 +1,24 @@
 {
+  "s2n-quic": {
+    "image": "aws/s2n-quic-qns:latest",
+    "url": "https://github.com/aws/s2n-quic",
+    "role": "both"
+  },
+  "s2n-quic-rustls": {
+    "image": "aws/s2n-quic-qns-rustls:latest",
+    "url": "https://github.com/aws/s2n-quic",
+    "role": "both"
+  },
   "quic-go": {
     "image": "martenseemann/quic-go-interop:latest",
     "url": "https://github.com/lucas-clemente/quic-go",
     "role": "both"
   },
-  "quicly": {
-    "image": "h2oserver/quicly-interop-runner:latest",
-    "url": "https://github.com/h2o/quicly",
-    "role": "both"
-  },
   "ngtcp2": {
     "image": "ghcr.io/ngtcp2/ngtcp2-interop:latest",
     "url": "https://github.com/ngtcp2/ngtcp2",
     "role": "both"
   },
-  "quant": {
-    "image": "ntap/quant:interop",
-    "url": "https://github.com/NTAP/quant",
-    "role": "both"
-  },
   "mvfst": {
     "image": "lnicco/mvfst-qns:latest",
     "url": "https://github.com/facebookincubator/mvfst",
diff --git a/interop.py b/interop.py
index 4dea51d..d84bdac 100644
--- a/interop.py
+++ b/interop.py
@@ -124,6 +124,7 @@ class InteropRunner:
         cmd = (
             "CERTS=" + certs_dir.name + " "
             "TESTCASE_CLIENT=" + random_string(6) + " "
+            "TEST_TYPE=TEST "
             "SERVER_LOGS=/dev/null "
             "CLIENT_LOGS=" + client_log_dir.name + " "
             "WWW=" + www_dir.name + " "
@@ -148,6 +149,7 @@ class InteropRunner:
         cmd = (
             "CERTS=" + certs_dir.name + " "
             "TESTCASE_SERVER=" + random_string(6) + " "
+            "TEST_TYPE=TEST "
             "SERVER_LOGS=" + server_log_dir.name + " "
             "CLIENT_LOGS=/dev/null "
             "WWW=" + www_dir.name + " "
@@ -344,6 +346,7 @@ class InteropRunner:
             "CERTS=" + testcase.certs_dir() + " "
             "TESTCASE_SERVER=" + testcase.testname(Perspective.SERVER) + " "
             "TESTCASE_CLIENT=" + testcase.testname(Perspective.CLIENT) + " "
+            "TEST_TYPE=" + testcase.test_type() + " "
             "WWW=" + testcase.www_dir() + " "
             "DOWNLOADS=" + testcase.download_dir() + " "
             "SERVER_LOGS=" + server_log_dir.name + " "
@@ -474,23 +477,26 @@ class InteropRunner:
                     client,
                     self._implementations[client]["image"],
                 )
-                if not (
-                    self._check_impl_is_compliant(server)
-                    and self._check_impl_is_compliant(client)
-                ):
-                    logging.info("Not compliant, skipping")
-                    continue
 
+                transfer_succeeded = True
                 # run the test cases
                 for testcase in self._tests:
                     status = self._run_testcase(server, client, testcase)
                     self.test_results[server][client][testcase] = status
                     if status == TestResult.FAILED:
                         nr_failed += 1
+                        if testcase == testcases.TestCaseTransfer:
+                            transfer_succeeded = False
 
                 # run the measurements
                 for measurement in self._measurements:
-                    res = self._run_measurement(server, client, measurement)
+                    if transfer_succeeded:
+                        res = self._run_measurement(server, client, measurement)
+                    else:
+                        logging.debug("Skipping measurements as Transfer testcase was unsuccessful")
+                        res = MeasurementResult()
+                        res.result = TestResult.UNSUPPORTED
+                        res.details = "Skipping measurements as Transfer testcase was unsuccessful"
                     self.measurement_results[server][client][measurement] = res
 
         self._print_results()
diff --git a/pull.py b/pull.py
index c2d6d1f..844bbd5 100644
--- a/pull.py
+++ b/pull.py
@@ -5,7 +5,7 @@ import sys
 from implementations import IMPLEMENTATIONS
 
 print("Pulling the simulator...")
-os.system("docker pull martenseemann/quic-network-simulator")
+os.system("docker pull wesleyrosenblum/quic-network-simulator")
 
 print("\nPulling the iperf endpoint...")
 os.system("docker pull martenseemann/quic-interop-iperf-endpoint")
diff --git a/testcases.py b/testcases.py
index 1d81d25..99394cc 100644
--- a/testcases.py
+++ b/testcases.py
@@ -90,6 +90,10 @@ class TestCase(abc.ABC):
         """ The name of testcase presented to the endpoint Docker images"""
         return self.name()
 
+    @staticmethod
+    def test_type() -> str:
+        return "TEST"
+
     @staticmethod
     def scenario() -> str:
         """ Scenario for the ns3 simulator """
@@ -1201,54 +1205,26 @@ class TestCasePortRebinding(TestCaseTransfer):
             logging.info("Server saw only a single client port in use; test broken?")
             return TestResult.FAILED
 
-        last = None
-        num_migrations = 0
-        for p in tr_server:
-            cur = (
-                getattr(p["ipv6"], "dst")
-                if "IPV6" in str(p.layers)
-                else getattr(p["ip"], "dst"),
-                int(getattr(p["udp"], "dstport")),
-            )
-            if last is None:
-                last = cur
-                continue
-
-            if last != cur:
-                last = cur
-                num_migrations += 1
-                # packet to different IP/port, should have a PATH_CHALLENGE frame
-                if hasattr(p["quic"], "path_challenge.data") is False:
-                    logging.info(
-                        "First server packet to new client destination %s did not contain a PATH_CHALLENGE frame",
-                        cur,
-                    )
-                    logging.info(p["quic"])
-                    return TestResult.FAILED
-
-        tr_client = self._client_trace()._get_packets(
-            self._client_trace()._get_direction_filter(Direction.FROM_CLIENT) + " quic"
+        tr_server2client = self._client_trace()._get_packets(
+            self._client_trace()._get_direction_filter(Direction.FROM_SERVER) + " quic"
         )
 
         challenges = list(
             set(
                 getattr(p["quic"], "path_challenge.data")
-                for p in tr_server
+                for p in tr_server2client
                 if hasattr(p["quic"], "path_challenge.data")
             )
         )
-        if len(challenges) < num_migrations:
-            logging.info(
-                "Saw %d migrations, but only %d unique PATH_CHALLENGE frames",
-                len(challenges),
-                num_migrations,
-            )
-            return TestResult.FAILED
+
+        tr_client2server = self._client_trace()._get_packets(
+            self._client_trace()._get_direction_filter(Direction.FROM_CLIENT) + " quic"
+        )
 
         responses = list(
             set(
                 getattr(p["quic"], "path_response.data")
-                for p in tr_client
+                for p in tr_client2server
                 if hasattr(p["quic"], "path_response.data")
             )
         )
@@ -1445,6 +1421,10 @@ class MeasurementGoodput(Measurement):
     def testname(p: Perspective):
         return "transfer"
 
+    @staticmethod
+    def test_type() -> str:
+        return "MEASUREMENT"
+
     @staticmethod
     def abbreviation():
         return "G"
@@ -1528,8 +1508,8 @@ TESTCASES = [
     TestCaseChaCha20,
     TestCaseMultiplexing,
     TestCaseRetry,
-    TestCaseResumption,
-    TestCaseZeroRTT,
+    # TestCaseResumption,
+    # TestCaseZeroRTT,
     TestCaseHTTP3,
     TestCaseBlackhole,
     TestCaseKeyUpdate,
@@ -1540,11 +1520,9 @@ TESTCASES = [
     TestCaseHandshakeCorruption,
     TestCaseTransferCorruption,
     TestCaseIPv6,
-    # The next three tests are disabled due to Wireshark not being able
-    # to decrypt packets sent on the new path.
-    # TestCasePortRebinding,
-    # TestCaseAddressRebinding,
-    # TestCaseConnectionMigration,
+    TestCasePortRebinding,
+    TestCaseAddressRebinding,
+    TestCaseConnectionMigration,
 ]
 
 MEASUREMENTS = [
