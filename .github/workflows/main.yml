on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: ci

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Format
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        toolchain: stable
        args: --all -- --check

    - name: Clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --all-features --all-targets -- -D warnings

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: [stable, beta, nightly, 1.42.0]
        os: [ubuntu-latest, macOS-latest]

    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 300M
      SCCACHE_DIR: ${{ github.workspace }}/.sccache
      SCCACHE_IDLE_TIMEOUT: 0

    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - uses: actions/checkout@v2

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          use-tool-cache: true
          version: latest

      - name: Generate Cargo.lock
        run: cargo update

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ matrix.rust }}-test-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ matrix.rust }}-test-cargo-registry-

      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-${{ matrix.rust }}-test-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: ${{ runner.os }}-${{ matrix.rust }}-test-sccache-

      - name: Start sccache
        run: sccache --start-server

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Stop sccache
        run: sccache --stop-server

  miri:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate: [quic/s2n-quic-core]

    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: miri

      - uses: actions/checkout@v2

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          use-tool-cache: true
          version: latest

      - name: Generate Cargo.lock
        run: cargo update

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ matrix.rust }}-miri-${{ matrix.crate }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ matrix.rust }}-miri-${{ matrix.crate }}-cargo-registry-

      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-${{ matrix.rust }}-miri-${{ matrix.crate }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: ${{ runner.os }}-${{ matrix.rust }}-miri-${{ matrix.crate }}-sccache-

      - name: Start sccache
        run: sccache --start-server

      - name: ${{ matrix.crate }}
        run: cd ${{ matrix.crate }} && cargo miri test

      - name: Stop sccache
        run: sccache --stop-server

  coverage:
    runs-on: ubuntu-latest

    env:
      # From https://github.com/mozilla/grcov#example-how-to-generate-gcda-files-for-a-rust-project
      CARGO_INCREMENTAL: '0'
      RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort'
      RUSTDOCFLAGS: '-Cpanic=abort'
      GRCOV_CONFIG: '--branch --llvm --ignore-not-existing --source-dir .'
      GRCOV_FILTER: "--excl-start '\\#\\[cfg\\(test\\)\\]' --excl-stop KCOV_END_TEST_MARKER --ignore tests --ignore test --ignore testing.rs"
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 300M
      SCCACHE_DIR: ${{ github.workspace }}/.sccache
      SCCACHE_IDLE_TIMEOUT: 0

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Install grcov
        uses: actions-rs/install@v0.1
        with:
          crate: grcov
          use-tool-cache: true
          version: latest

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          use-tool-cache: true
          version: latest

      - name: Generate Cargo.lock
        run: cargo update

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-coverage-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-coverage-cargo-registry-

      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-coverage-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: ${{ runner.os }}-coverage-sccache-

      - name: Start sccache
        run: sccache --start-server

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast --workspace --exclude s2n-quic-rustls --exclude interop-server

      - name: Run cargo test --all-features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast --workspace --exclude s2n-quic-rustls --exclude interop-server --all-features

      - name: Stop sccache
        run: sccache --stop-server

      - name: Run grcov html
        run: |
          grcov $GRCOV_CONFIG $GRCOV_FILTER --output-type html --output-path coverage ./target/debug

      - name: Run grcov lcov
        run: |
          grcov $GRCOV_CONFIG $GRCOV_FILTER --output-type lcov --output-path coverage/s2n-quic.lcov ./target/debug

      - name: Upload report
        uses: actions/upload-artifact@v1
        with:
          name: coverage
          path: coverage
