on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: interop

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: 1
  SCCACHE_CACHE_SIZE: 300M
  SCCACHE_DIR: ${{ github.workspace }}/.sccache
  SCCACHE_IDLE_TIMEOUT: 0
  # This kept breaking builds so we're pinning for now. We should do our best to keep
  # up with the changes, though.
  INTEROP_RUNNER_REF: d84aa4f4c8375ea294c7032cebce8034eaf01d24

jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.implementations.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: marten-seemann/quic-interop-runner
          ref: ${{ env.INTEROP_RUNNER_REF }}
          path: quic-interop-runner

      - name: Define implementations
        id: implementations
        working-directory: quic-interop-runner
        run: |
          CLIENTS=$(cat implementations.json \
            | jq -c '[. | to_entries[] | select(.value.role == "both" or .value.role == "client") | {"client": .key, "server": "s2n-quic"}] | sort'
          )
          echo "Clients: $CLIENTS"
          SERVERS=$(cat implementations.json \
            | jq -c '[. | to_entries[] | select(.value.role == "both" or .value.role == "server") | {"client": "s2n-quic", "server": .key}] | sort'
          )
          echo "Servers: $SERVERS"
          # TODO add clients when s2n-quic supports at least one test
          # TODO add servers when s2n-quic adds support for client mode
          MATRIX=$(echo "[]" | jq -c '{"include": . | flatten}')
          echo "Matrix: $MATRIX"
          echo "::set-output name=matrix::$MATRIX"

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/checkout@v2

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          use-tool-cache: true
          version: latest

      - name: Generate Cargo.lock
        run: cargo update

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-

      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-

      - name: Start sccache
        run: sccache --start-server

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --bin s2n-quic-qns --release
        env:
          RUSTC_WRAPPER: sccache

      - name: Prepare artifact
        run: |
          mkdir -p s2n-quic-qns
          cp target/release/s2n-quic-qns s2n-quic-qns/
          cp qns/Dockerfile s2n-quic-qns/
          cp qns/run_endpoint.sh s2n-quic-qns/

      - uses: actions/upload-artifact@v2
        with:
          name: s2n-quic-qns
          path: s2n-quic-qns/

      - name: Stop sccache
        run: sccache --stop-server

  interop:
    runs-on: ubuntu-latest
    needs: [env, build]
    strategy:
      matrix: ${{ fromJson(needs.env.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: s2n-quic-qns
          path: s2n-quic-qns/

      - name: Run docker build
        working-directory: s2n-quic-qns
        run: |
          docker build . --file Dockerfile --tag awslabs/s2n-quic-qns
 
      - uses: actions/checkout@v2
        with:
          repository: marten-seemann/quic-interop-runner
          ref: ${{ env.INTEROP_RUNNER_REF }}
          path: quic-interop-runner

      - name: Patch implementations.json
        working-directory: quic-interop-runner
        run: |
          mv implementations.json implementations.old.json
          # Append our implementation
          cat implementations.old.json \
            | jq '. + {"s2n-quic": {"image": "awslabs/s2n-quic-qns:latest", "url": "https://github.com/awslabs/s2n-quic", "role": "both"}}' \
            > implementations.json
          cat implementations.json

      - name: Run docker pull
        working-directory: quic-interop-runner
        run: |
          docker pull martenseemann/quic-network-simulator:latest
          docker pull martenseemann/quic-interop-iperf-endpoint:latest

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        working-directory: quic-interop-runner
        run: |
          sudo apt-get update
          sudo apt-get install -y tshark
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt

      - name: Generate certificates
        working-directory: quic-interop-runner
        run: ./certs.sh

      - name: Run quic-interop-server
        working-directory: quic-interop-runner
        run: |
          mkdir -p results
          python3 run.py --client ${{ matrix.client }} --server ${{ matrix.server }} --json results/results.json --debug | true

      - name: Prepare artifacts
        working-directory: quic-interop-runner
        run: |
          ls -al
          mv certs results | true
          mv logs* results | true
          # clean up invalid path characters
          find results -name '*:*' | while read from; do
            to=$(echo $from | sed 's/:/_/g')
            mv $from $to
          done

      - uses: actions/upload-artifact@v2
        with:
          name: interop-${{ matrix.client }}-client-${{ matrix.server }}-server
          path: quic-interop-runner/results/
