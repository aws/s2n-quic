on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: ci

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: 1
  # Pin the nightly toolchain to prevent breakage.
  # This should be occasionally updated.
  RUST_NIGHTLY_TOOLCHAIN: nightly-2020-11-09

jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      rust-versions: ${{ steps.definitions.outputs.versions }}
      msrv: ${{ steps.definitions.outputs.msrv }}
    steps:
      - uses: actions/checkout@v2
      - name: Evaluate definitions
        id: definitions
        run: |
          export MSRV=$(cat rust-toolchain | awk '{$1=$1};1')
          echo "::set-output name=msrv::$MSRV"
          export RAW_VERSIONS="stable beta $RUST_NIGHTLY_TOOLCHAIN $MSRV"
          export VERSIONS=$(echo $RAW_VERSIONS | jq -scR 'rtrimstr("\n")|split(" ")|.')
          echo "::set-output name=versions::$VERSIONS"

      - uses: ouzi-dev/commit-status-updater@v1.1.0
        with:
          name: 'compliance / report'
          status: 'pending'

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: clippy

      - uses: Swatinem/rust-cache@v1

      - uses: actions/checkout@v2

      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets -- -D warnings

  udeps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v1

      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-udeps
          use-tool-cache: true
          version: latest

      - uses: actions/checkout@v2

      - name: Run cargo udeps
        run: cargo udeps --workspace --all-targets

  doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true
      
      - uses: Swatinem/rust-cache@v1

      - uses: actions/checkout@v2

      - name: Run cargo doc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --all-features --no-deps --workspace --exclude cargo-compliance --exclude compliance --exclude s2n-quic-qns

      - uses: actions/upload-artifact@v2
        with:
          name: docs
          path: target/doc

  test:
    runs-on: ${{ matrix.os }}
    needs: env
    strategy:
      matrix:
        rust: ${{ fromJson(needs.env.outputs.rust-versions) }}
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - uses: Swatinem/rust-cache@v1

      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Restore fuzz corpus
        shell: bash
        run: |
          find . -name 'corpus.tar.gz' -exec dirname {} ';' | xargs -L 1 bash -c 'cd "$0" && rm -rf corpus && tar xf corpus.tar.gz'

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  miri:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate: [quic/s2n-quic-core]
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
          components: miri

      - uses: Swatinem/rust-cache@v1

      - uses: actions/checkout@v2

      - name: ${{ matrix.crate }}
        run: cd ${{ matrix.crate }} && cargo miri test
        env:
          # needed to read corpus files from filesystem
          MIRIFLAGS: -Zmiri-disable-isolation

  no_std:
    runs-on: ubuntu-latest
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
          target: thumbv7m-none-eabi

      - uses: Swatinem/rust-cache@v1

      - uses: actions/checkout@v2

      # see https://github.com/rust-lang/cargo/issues/7916
      - name: Run cargo build
        run: |
          cd quic/s2n-quic-core && \
            cargo build \
              -Z features=dev_dep \
              --no-default-features \
              --target thumbv7m-none-eabi

  compliance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true

      - uses: Swatinem/rust-cache@v1

      - name: Cache cargo-compliance
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: target/release/cargo-compliance
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-compliance-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('common/compliance/**') }}

      - name: Build cargo compliance
        run: test -f target/release/cargo-compliance || cargo build --bin cargo-compliance --release

      - name: Run cargo compliance
        run: ./scripts/compliance ${{ github.sha }}

      - uses: actions/upload-artifact@v2
        with:
          name: compliance
          path: compliance

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Upload to S3
        id: s3
        run: |
          TARGET="s3://s2n-quic-ci-artifacts/${{ github.sha }}/compliance.html"
          aws s3 cp target/compliance/report.html $TARGET --acl private --follow-symlinks
          # generate a presigned url that is valid for 30 days
          URL=$(aws s3 presign $TARGET --expires-in 2592000)
          echo "::set-output name=URL::$URL"

      - uses: ouzi-dev/commit-status-updater@v1.1.0
        with:
          name: 'compliance / report'
          status: 'success'
          url: "${{ steps.s3.outputs.URL }}"

  coverage:
    runs-on: ubuntu-latest
    env:
      GRCOV_CONFIG: --branch --llvm --ignore-not-existing --source-dir .
      GRCOV_IGNORE: --ignore '**/compliance/**' --ignore 'quic/s2n-quic-qns/**' --ignore '**/tests/**' --ignore '**/test/**' --ignore '**/testing/**' --ignore '**/testing.rs' --ignore '**/tests.rs' --ignore '**/.cargo/registry/**'
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Restore fuzz corpus
        run: |
          find . -name 'corpus.tar.gz' -exec dirname {} ';' | xargs -L 1 bash -c 'cd "$0" && rm -rf corpus && tar xf corpus.tar.gz'

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true

      - uses: Swatinem/rust-cache@v1

      - name: Install grcov
        uses: actions-rs/install@v0.1
        with:
          crate: grcov
          use-tool-cache: true
          version: latest

      - name: Install covfix
        uses: actions-rs/install@v0.1
        with:
          crate: rust-covfix
          use-tool-cache: true
          version: latest

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast --workspace --exclude s2n-quic-qns --all-features
        env:
          # From https://github.com/mozilla/grcov#example-how-to-generate-gcda-files-for-a-rust-project
          RUSTFLAGS: -Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests

      - name: Run grcov lcov
        run: |
          eval grcov $GRCOV_CONFIG $GRCOV_IGNORE --output-type lcov --output-path coverage.unfiltered.lcov ./target/debug

      - name: Run covfix
        run: rust-covfix -o coverage.lcov coverage.unfiltered.lcov

      - uses: actions/upload-artifact@v2
        with:
          name: unit-tests.lcov
          path: coverage.lcov

      - name: Upload report to codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.lcov
          flags: unit-tests

  examples:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example: [examples/quic-echo-server]
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1

      - uses: actions/checkout@v2

      - name: ${{ matrix.example }}
        working-directory: ${{ matrix.example }}
        # TODO make sure the example actually runs as well
        run: cargo build

  perf:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        script: [server]
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1

      - uses: actions/checkout@v2

      - name: Install inferno
        uses: actions-rs/install@v0.1
        with:
          crate: inferno
          use-tool-cache: true
          version: latest

      - name: Build
        run: ./scripts/${{ matrix.script }}-perf/build

      - name: Run script
        run: ./scripts/${{ matrix.script }}-perf/run

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Upload results
        id: s3
        run: |
          TARGET="s3://s2n-quic-ci-artifacts/${{ github.sha }}/perf/${{ matrix.script }}.svg"
          aws s3 cp target/perf/1G.svg $TARGET --acl private --follow-symlinks
          # generate a presigned url that is valid for 30 days
          URL=$(aws s3 presign $TARGET --expires-in 2592000)
          echo "::set-output name=URL::$URL"

      - uses: ouzi-dev/commit-status-updater@v1.1.0
        with:
          name: 'perf / report (${{ matrix.script }})'
          status: 'success'
          url: "${{ steps.s3.outputs.URL }}"
