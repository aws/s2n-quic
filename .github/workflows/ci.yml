on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: ci

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  SCCACHE_CACHE_SIZE: 300M
  SCCACHE_DIR: ${{ github.workspace }}/.sccache
  SCCACHE_IDLE_TIMEOUT: 0
  # Pin the nightly toolchain to prevent breakage.
  # This should be occasionally updated.
  RUST_NIGHTLY_TOOLCHAIN: nightly-2020-07-11

jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      rust-versions: ${{ steps.rust-versions.outputs.value }}
      msrv: ${{ steps.msrv.outputs.value }}
    steps:
      - uses: actions/checkout@v2
      - name: Define msrv
        id: msrv
        run: |
          export MSRV=$(cat rust-toolchain | awk '{$1=$1};1')
          echo "::set-env name=MSRV::$MSRV"
          echo "::set-output name=value::$MSRV"
      - name: Define rust-versions
        id: rust-versions
        run: |
          export RAW_VERSIONS="stable beta $RUST_NIGHTLY_TOOLCHAIN $MSRV"
          export VERSIONS=$(echo $RAW_VERSIONS | jq -scR 'rtrimstr("\n")|split(" ")|.')
          echo "::set-output name=value::$VERSIONS"

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    runs-on: ubuntu-latest
    env:
      RUSTC_WRAPPER: sccache
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: clippy

      - uses: actions/checkout@v2

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          use-tool-cache: true
          version: latest

      - name: Generate Cargo.lock
        run: cargo update

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-

      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-

      - name: Start sccache
        run: sccache --start-server

      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets -- -D warnings

      - name: Stop sccache
        run: sccache --stop-server

  udeps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true

      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-udeps
          use-tool-cache: true
          version: latest

      - uses: actions/checkout@v2

      - name: Run cargo udeps
        run: cargo udeps --workspace --all-targets

  test:
    runs-on: ${{ matrix.os }}
    needs: env
    strategy:
      matrix:
        rust: ${{ fromJson(needs.env.outputs.rust-versions) }}
        os: [ubuntu-latest, macOS-latest]
    env:
      RUSTC_WRAPPER: sccache
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - uses: actions/checkout@v2

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          use-tool-cache: true
          version: latest

      - name: Generate Cargo.lock
        run: cargo update

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-

      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-

      - name: Start sccache
        run: sccache --start-server

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Stop sccache
        run: sccache --stop-server

  miri:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate: [quic/s2n-quic-core]
    env:
      RUSTC_WRAPPER: sccache
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
          components: miri

      - uses: actions/checkout@v2

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          use-tool-cache: true
          version: latest

      - name: Generate Cargo.lock
        run: cargo update

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-${{ matrix.crate }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-${{ matrix.crate }}-cargo-registry-

      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-${{ matrix.crate }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-${{ matrix.crate }}-sccache-

      - name: Start sccache
        run: sccache --start-server

      - name: ${{ matrix.crate }}
        run: cd ${{ matrix.crate }} && cargo miri test

      - name: Stop sccache
        run: sccache --stop-server

  no_std:
    runs-on: ubuntu-latest
    env:
      RUSTC_WRAPPER: sccache
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
          target: thumbv7m-none-eabi

      - uses: actions/checkout@v2

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          use-tool-cache: true
          version: latest

      - name: Generate Cargo.lock
        run: cargo update

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-

      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-

      - name: Start sccache
        run: sccache --start-server

      # see https://github.com/rust-lang/cargo/issues/7916
      - name: Run cargo build
        run: |
          cd quic/s2n-quic-core && \
            cargo build \
              -Z features=dev_dep \
              --no-default-features \
              --target thumbv7m-none-eabi

      - name: Stop sccache
        run: sccache --stop-server

  coverage:
    runs-on: ubuntu-latest
    env:
      # From https://github.com/mozilla/grcov#example-how-to-generate-gcda-files-for-a-rust-project
      RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests'
      GRCOV_CONFIG: '--branch --llvm --ignore-not-existing --source-dir .'
      GRCOV_FILTER: "--excl-start '\\#\\[cfg\\(test\\)\\]' --excl-stop KCOV_END_TEST_MARKER --ignore tests --ignore test --ignore testing.rs"
      RUSTC_WRAPPER: sccache
      # increase the size a bit to maintain cache hits
      SCCACHE_CACHE_SIZE: 600M
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true

      - name: Install grcov
        uses: actions-rs/install@v0.1
        with:
          crate: grcov
          use-tool-cache: true
          version: latest

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          use-tool-cache: true
          version: latest

      - name: Generate Cargo.lock
        run: cargo update

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-

      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-

      - name: Start sccache
        run: sccache --start-server

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast --workspace --exclude s2n-quic-rustls --exclude interop-server

      - name: Run cargo test --all-features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast --workspace --exclude s2n-quic-rustls --exclude interop-server --all-features

      - name: Run cargo compliance
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --bin cargo-compliance --release -- report --lcov target/compliance/coverage --source-pattern 'quic/**/*.rs'

      - name: Stop sccache
        run: sccache --stop-server

      - name: Run grcov html
        run: |
          grcov $GRCOV_CONFIG $GRCOV_FILTER --output-type html --output-path coverage ./target/debug ./target/compliance/coverage

      - name: Run grcov lcov
        run: |
          grcov $GRCOV_CONFIG $GRCOV_FILTER --output-type lcov --output-path coverage/s2n-quic.lcov ./target/debug ./target/compliance/coverage

      - name: Upload report
        uses: actions/upload-artifact@2.1.0
        with:
          name: coverage
          path: coverage

      - name: Upload report to codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/s2n-quic.lcov
